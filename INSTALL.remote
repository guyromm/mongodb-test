#fresh install

#install known hosts (for github) on all machines
for ITEM in `cat newmachines.txt` ; do echo $ITEM ; scp known_hosts $ITEM:~/.ssh/ ; done

#xargs usage:
cat newmachines.txt | xargs -P0 -n1 -I{} ssh {} uname -a

#install packages
cat newmachines.txt | \
    xargs -P0 -n1 -I{} ssh {} "apt-get update ; \
    sudo apt-get install -y emacs23-nox git-core screen python-setuptools python-dev gcc libevent-dev telnet devscripts"

#check that we have github access
for H in `cat newmachines.txt ` ; do echo $H ; ssh $H "ssh git@github.com" ;  done
#simultaneous
cat newmachines.txt | xargs -P0 -n1 -I{} ssh {} ssh git@github.com

#fetch the git repo
cat newmachines.txt | \
    xargs -P0 -n1 -I{} ssh {} 'cd ~/ ; \
    git clone git@github.com:guyromm/mongodb-test.git ; \
    git config --global user.name "Guy Romm" ; \
    git config --global user.email guyromm@gmail.com'

cat newmachines.txt | xargs -P0 -n1 -I{} ssh {} 'cd ~/mongodb-test ; git submodule update --recursive --init'

cat newmachines.txt | \
    xargs -P0 -n1 -I{} ssh {} 'easy_install gevent gevent-websocket websocket WebOb redis routes mako pymongo'

cat newmachines.txt | \
    xargs -P0 -n1 -I{} ssh {} "sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10 ; \
    echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' >> /etc/apt/sources.list"

cat newmachines.txt | xargs -P0 -n1 -I{} ssh {} "apt-get update ; apt-get install mongodb-10gen"

#fetch secondary interfaces
cat newmachines.txt | \
    xargs -P0 -n1 -I{} ssh {} "annotate-output +{} ifconfig eth1 | grep 'inet addr'" | awk '{print "\""$1":"$4"\","}' | sed s/:addr:/\":\"/




#routine & maintenance

#pull latest ver
cat machines.txt | xargs -P0 -n1 -I{} ssh {} 'cd ~/mongodb-test ; git pull'

#check which screens are running
cat machines.txt | xargs -P0 -n1 -I{} ssh {} 'ps aux | grep screen | grep -v "grep screen" | wc'

#killall mongod and mongos
cat machines.txt | xargs -P0 -n1 -I{} ssh {} 'pkill -f mongod ; pkill -f mongos'

#recreate confs
cat machines.txt |\
     xargs -P0 -n1 -I{} ssh {} 'rm -rf /var/lib/mongocfg /var/lib/mongodb ; mkdir /var/lib/mongocfg /var/lib/mongodb'

#killall screens
cat machines.txt | xargs -P0 -n1 -I{} ssh {} 'pkill -f screen'

#remove dead screens
cat machines.txt  | xargs -P0 -n1 -I{} ssh {} 'screen -wipe'
 
#have a look at loads
cat machines.txt | xargs -P0 -n1 -I{} ssh {} 'annotate-output +{} uptime' | egrep -v '(Started|Finished)'

#init slave mongo sessions
cat machines.txt | xargs -P0 -n1 -I{} ssh {} 'screen -S slave -d -m -c ~/mongodb-test/mongodb-test.slave.screen'


#init master mongo sessions
cat masters.txt  | xargs -P0 -n1 -I{} ssh {} 'screen -S master -d -m -c ~/mongodb-test/mongodb-test.master.screen'


#see if mongo is running
cat machines.txt | \
    xargs -P0 -n1 -I{} ssh {} 'ps aux | \
    egrep "mongod(.*)-f" | \
    grep -v "grep mongod" | \
    annotate-output +{} wc -l | \
    egrep -v "(Started|Finished)"'


#if screen is running
cat machines.txt | \
    xargs -P0 -n1 -I{} ssh {} 'ps aux | \
    grep "screen" | \
    grep -v "grep screen" | annotate-output +{} wc -l | \
    egrep -v "(Started|Finished)"'

#build more servers
cloudservers --user guyromm --apikey <apikey> boot   --image 69  --key ~/.ssh/authorized_keys2 <machine>

#remove a db in all mongos
cat machines.txt | xargs -P0 -n1 -I{} ssh {} "echo 'db.dropDatabase()' | mongo localhost:27017/test_database"

#amount of records in mongod test collections
cat machines.txt | \
        xargs -P0 -n1 -I{}     ssh {} 'annotate-output +{} mongo --eval "db.sharded_30nodes.count()" --quiet \
	     localhost:27017/test_database' | egrep -v '(Finished|Started)' | awk '{print $3" "$1}' |sort -n

#databases present
cat machines.txt | \
    xargs -P0 -n1 -I{} \
    ssh {} 'echo "show dbs" | mongo --quiet \
     localhost:27017/admin'

#drop test_database
cat machines.txt | \
    xargs -P0 -n1 -I{} \
    ssh {} 'echo "db.dropDatabase()" | mongo --quiet \
     localhost:27017/test_database'

cat machines.txt | \
    xargs -P0 -n1 -I{} ssh {} 'mongo --eval "db.sharded_20nodes.count()" --quiet localhost:27017/test_database'



#sequential with machine names
for ITEM in `cat machines.txt` ; \
    do echo $ITEM ; ssh $ITEM 'mongo --eval "db.sharded_20nodes.count()" --quiet localhost:27017/test_database' ; done

#query a specific int_id
cat machines.txt | \
    xargs -P0 -n1 -I{} \
    ssh {} 'annotate-output +{} mongo --eval "db.sharded_20nodes.find({indexed_id:hex_md5(\"27115708\")})" --quiet \
    localhost:27017/test_database'\
    | egrep -v '(Finished|Started)'

cat machines.txt | \
    xargs -P0 -n1 -I{} \
    ssh {} 'annotate-output +{} mongo \
     --eval "db.sharded_20nodes.find({indexed_id:\"825b23f0804f5807ee3fdd584b43a8e6\"})" --quiet \
    localhost:27017/test_database'\
    | egrep -v '(Finished|Started)'


for ITEM in `cat machines.txt`; do \
    echo $ITEM ; 
    ssh $ITEM mongo --eval 'db.sharded_20nodes.find\({indexed_id:"825b23f0804f5807ee3fdd584b43a8e6"}\)' --quiet \
    localhost:27017/test_database ; 
    done


echo 'mongo1' | \
     xargs -P0 -n1 -I{} \
     ssh {} 'annotate-output +{} \
     echo "db.sharded_20nodes.find({indexed_id:hex_md5(\"27115708\")});" | mongo localhost:10000/test_database --quiet'